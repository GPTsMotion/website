---
import data from "./data.json";

// 获取唯一的类别类型
const types = Array.from(new Set(data.map((item) => item.type)));

// 分组数据
const groupedData = {};
types.forEach((type) => {
  groupedData[type] = data.filter((item) => item.type === type);
});

// 初始选择的类型
let selectedType = "Languages";
---

<div class="py-20 text-white flex items-center justify-center z-40">
  <div
    class="w-full flex flex-col gap-10 max-w-4xl items-center justify-between font-mono text-sm lg:flex"
  >
    <div class="pt-20 flex flex-row gap-10 justify-center items-center">
      <svg
        class="h-16"
        viewBox="0 0 430 232"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M214.902 184.495C199.018 199.845 183.07 215.28 167.052 230.796C166.416 231.411 165.881 231.75 164.939 231.75C150.907 231.737 137.193 231.731 123.791 231.731C115.843 231.737 108.378 231.227 101.397 230.205C101.301 230.193 101.263 230.076 101.333 230.009C124.071 208.089 146.675 186.236 169.159 164.452C184.553 149.533 192.336 129.224 189.701 108.123C185.895 77.6635 162.038 53.6702 130.689 48.9207C121.615 47.5427 111.331 47.9918 102.224 50.3665C89.3247 53.7255 78.3153 60.0069 69.1896 69.2166C58.1229 80.3827 50.7155 95.6154 49.9518 111.229C49.1054 128.535 54.311 145.626 65.6322 158.785C76.998 171.994 91.552 180.078 109.288 183.043C109.415 183.062 109.473 183.216 109.377 183.308L70.4496 220.848C70.2715 221.02 70.0105 221.063 69.7878 220.959C38.1215 206.655 14.4099 179.949 4.84514 147.41C1.56142 136.238 0.0850082 124.174 0.415926 111.223C1.10958 84.3139 13.1626 56.8201 32.2604 37.2871C50.0855 19.0522 71.5506 7.45539 96.6622 2.50293C105.54 0.74957 115.104 0.220494 124.561 0.251254C138.122 0.294319 151.626 0.300464 165.079 0.263552C165.709 0.263552 166.308 0.503492 166.753 0.934141L214.825 47.475C214.946 47.5919 215.15 47.5919 215.277 47.475L263.623 0.675743C263.878 0.423506 264.228 0.282007 264.597 0.282007C278.623 0.269703 293.896 0.275858 310.416 0.294314C316.678 0.300466 322.724 0.768025 328.547 1.68469C328.744 1.71545 328.827 1.94924 328.68 2.09073C307.966 22.1159 287.137 42.2334 266.2 62.4308C261.3 67.1618 258.335 70.0902 257.304 71.216C230.461 100.715 235.151 145.312 266.843 169.41C281.213 180.336 301.195 185.886 319.465 183.099C339.83 179.998 355.866 170.481 367.569 154.54C383.905 132.301 384.141 102.223 368.912 79.3122C358.005 62.8984 341.064 52.3844 321.088 48.9453C320.738 48.89 320.694 48.7362 320.942 48.4962L359.627 11.1405C359.774 10.999 360.003 10.956 360.194 11.0421C374.251 17.2311 386.763 26.0225 397.728 37.4162C416.984 57.4291 427.822 82.782 429.438 110.073C431.481 144.549 417.042 177.611 391.357 200.577C373.068 216.923 351.685 226.853 327.204 230.353C319.491 231.46 311.453 231.762 302.875 231.75C290.281 231.737 277.623 231.737 264.902 231.743C264.349 231.743 263.878 231.553 263.489 231.177L215.239 184.495C215.144 184.403 214.991 184.403 214.902 184.495Z"
          fill="white"></path>
      </svg>
      <span class="text-5xl font-bold text-center">
        <svg
          width="260"
          viewBox="0 0 1495 284"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M267.095 112.405H238.262L222.287 170.851H251.51L236.314 227.348H207.481L193.844 278H135.399L149.036 227.348H87.8634L74.6159 278H16.1707L29.4183 227.348H0.585369L15.7811 170.851H44.614L60.589 112.405H31.3665L46.5622 55.9085H75.3951L89.0323 5.25605H147.477L133.84 55.9085H195.013L208.26 5.25605H266.706L253.458 55.9085H282.291L267.095 112.405ZM163.842 170.851L179.817 112.405H119.034L103.059 170.851H163.842ZM350.373 278V63.7012H313.358L328.944 5.25605H408.819V278H350.373ZM463.459 131.887H588.142V190.332H463.459V131.887ZM761.307 283.065C742.214 283.065 724.486 279.364 708.121 271.961C691.887 264.558 677.73 254.362 665.651 241.374C653.573 228.257 644.157 213.126 637.403 195.982C630.649 178.838 627.272 160.59 627.272 141.238C627.272 120.328 630.974 101.301 638.377 84.157C645.91 67.0131 656.04 52.207 668.768 39.7387C681.626 27.1405 696.108 17.4646 712.213 10.7109C728.447 3.95728 745.202 0.580455 762.475 0.580455C781.438 0.580455 800.14 4.99631 818.583 13.828C837.025 22.6597 853.65 36.9463 868.456 56.6878L816.245 84.7414C808.322 75.7798 799.621 69.221 790.139 65.0649C780.788 60.7789 771.307 58.6359 761.696 58.6359C751.955 58.6359 742.539 60.6491 733.448 64.6753C724.356 68.7015 716.239 74.4161 709.096 81.8192C701.952 89.2222 696.238 98.0539 691.952 108.314C687.796 118.575 685.718 129.939 685.718 142.407C685.718 153.837 687.666 164.552 691.562 174.552C695.588 184.553 701.108 193.319 708.121 200.852C715.135 208.255 723.252 214.1 732.474 218.386C741.695 222.542 751.566 224.62 762.086 224.62C768.06 224.62 773.97 223.841 779.814 222.282C785.789 220.594 791.568 218.126 797.153 214.879C802.738 211.632 807.998 207.476 812.933 202.411C817.868 197.346 822.349 191.371 826.375 184.488H789.75V133.835H895.341C896.38 154.226 893.587 173.448 886.964 191.501C880.47 209.424 871.054 225.27 858.715 239.037C846.377 252.804 831.895 263.584 815.271 271.376C798.646 279.169 780.658 283.065 761.307 283.065ZM928.813 278V5.25605H1031.68C1046.61 5.25605 1060.12 9.08746 1072.2 16.7503C1084.41 24.2832 1094.08 34.4137 1101.23 47.1417C1108.37 59.7399 1111.94 73.5719 1111.94 88.6378C1111.94 103.963 1108.24 117.925 1100.84 130.523C1093.56 143.122 1083.82 153.187 1071.61 160.72C1059.41 168.253 1046.09 172.019 1031.68 172.019H987.258V278H928.813ZM987.258 113.574H1025.05C1030.25 113.574 1034.99 112.276 1039.27 109.678C1043.56 106.951 1047 103.379 1049.6 98.9631C1052.2 94.5472 1053.5 89.6768 1053.5 84.3518C1053.5 79.0268 1052.2 74.1564 1049.6 69.7405C1047 65.3247 1043.56 61.818 1039.27 59.2204C1034.99 56.493 1030.25 55.1292 1025.05 55.1292H987.258V113.574ZM1349.54 5.25605V63.7012H1271.61V278H1213.17V63.7012H1135.24V5.25605H1349.54ZM1413.37 281.507C1403.49 280.598 1394.01 278.455 1384.92 275.078C1375.83 271.701 1367.71 267.09 1360.57 261.246C1353.43 255.401 1347.78 248.258 1343.62 239.816L1392.71 218.776C1394.01 220.204 1395.83 222.023 1398.17 224.23C1400.51 226.309 1403.43 228.192 1406.94 229.88C1410.57 231.569 1414.92 232.413 1419.99 232.413C1423.37 232.413 1426.61 232.088 1429.73 231.439C1432.98 230.659 1435.57 229.361 1437.52 227.542C1439.6 225.724 1440.64 223.191 1440.64 219.945C1440.64 216.308 1439.28 213.58 1436.55 211.762C1433.95 209.814 1430.77 208.45 1427 207.671C1423.24 206.762 1419.73 206.048 1416.48 205.528C1404.92 203.71 1393.82 200.073 1383.17 194.618C1372.65 189.034 1364.01 181.825 1357.26 172.994C1350.5 164.032 1347.13 153.577 1347.13 141.628C1347.13 128.251 1350.57 116.691 1357.45 106.951C1364.34 97.2097 1373.3 89.7417 1384.34 84.5466C1395.51 79.2216 1407.52 76.5591 1420.38 76.5591C1435.57 76.5591 1449.6 79.6762 1462.46 85.9103C1475.45 92.1445 1486.1 101.106 1494.41 112.795L1448.43 140.069C1446.87 138.121 1444.93 136.173 1442.59 134.225C1440.38 132.147 1437.78 130.394 1434.8 128.965C1431.94 127.406 1428.82 126.432 1425.44 126.043C1420.9 125.653 1416.81 125.848 1413.17 126.627C1409.66 127.277 1406.87 128.705 1404.79 130.913C1402.72 132.991 1401.68 136.043 1401.68 140.069C1401.68 143.836 1403.49 146.563 1407.13 148.252C1410.77 149.94 1414.86 151.174 1419.4 151.953C1423.95 152.733 1427.65 153.577 1430.51 154.486C1441.68 158.123 1452.2 162.863 1462.07 168.708C1471.94 174.552 1479.86 181.63 1485.84 189.943C1491.94 198.255 1494.8 207.996 1494.41 219.165C1494.41 232.153 1490.51 243.582 1482.72 253.453C1474.93 263.324 1464.86 270.792 1452.52 275.857C1440.19 280.922 1427.13 282.805 1413.37 281.507Z"
            fill="white"></path>
        </svg>
      </span>
    </div>
    <div class="py-10 text-center">
      {
        types.map((type, index) => (
          <button
            class={`${type === selectedType ? "bg-white text-black" : "bg-gray-700 text-white hover:bg-gray-500"} rounded-lg text-nowrap duration-300 hover:scale-[102%] px-3 mr-3 mb-3 py-2`}
            key={index}
            id={type}
          >
            {type}
          </button>
        ))
      }
    </div>
    <div>
      {
        selectedType && (
          <div class="grid gap-10 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
            {groupedData[selectedType]?.map((item, index) => (
              <a href={item.link} target="_blank" key={index}>
                <div class="w-48 hover:scale-[102%] cursor-pointer duration-300 flex flex-col items-center gap-4">
                  <img
                    src={item.avatar}
                    alt={item.name}
                    class="rounded-full w-24"
                  />
                  <h1 class="text-2xl font-bold text-center">{item.name}</h1>
                </div>
              </a>
            ))}
          </div>
        )
      }
    </div>
  </div>
</div>

<script>
  document.querySelectorAll("button").forEach((button) => {
    button.addEventListener("click", () => {
      const type = button.id;
      handleClick(type);
    });
  });

  function handleClick(type) {
    console.log("button clicked with type:", type);
  }
</script>
